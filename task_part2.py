# -*- coding: utf-8 -*-
"""Task-part2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n9zOsinQDudbzDgthxObBw9ZJ5piSagF

![image.jpeg](PlayStore.jpeg)

## Analysis And Visualizations
**Remember the csv file you created in the last task ? Now it's time to use it for some analysis and visualizations**

**Note: each question will be answered into 2 parts first your analysis using pandas and then use visualizations to prove it**

### 11. Which app has the greatest number of reviews?
"""

import pandas as pd
import matplotlib.pyplot as plt
df.to_csv('filteredplaystore.csv',index = False)
most_reviewed_app = df.loc[df['Reviews'].idxmax()] #the app with the highest number of reviews
print("App with most reviews:", most_reviewed_app['App'])
print("Number of reviews:", most_reviewed_app['Reviews'])
#bar chart for the most reviewed app
plt.figure(figsize=(6,4)) # Set figure size
plt.bar(most_reviewed_app['App'], most_reviewed_app['Reviews'], color='blue')
plt.title("App with the Most Reviews :) ")
plt.ylabel("Number of Reviews")
plt.show()

"""### 12. What Category Has the Highest Number of Apps Uploaded to the Store?

Get the specific category that contains the most significant number of uploaded applications.
"""

most_common_category = df['Category'].value_counts().idxmax()#category with the highest number of apps
num_apps_in_category = df['Category'].value_counts().max()
print("Category with most apps:)", most_common_category)
print("Number of apps in this category:", num_apps_in_category)
#bar chart for the top 10 categories with the most apps
plt.figure(figsize=(12,6))
plt.bar(top_categories.index, top_categories.values, color='red')
plt.title("Top 10 Categories with the Most Apps")
plt.xlabel("Category") # Label for the x-axis
plt.ylabel("Number of Apps")# Label for the y-axis
plt.show()

"""### 13. To Which Category Belongs the Most Expensive App?"""

#app with the highest price
most_expensive_app = df.loc[df['Price'].idxmax()]
print("Category of the most expensive app:", most_expensive_app['Category'])
#Show the price of the most expensive app (barchart)
plt.figure(figsize=(6,4))
plt.bar(most_expensive_app['Category'], most_expensive_app['Price'], color='green')
plt.xlabel("Category")
plt.ylabel("Price ($)")
plt.title("Most Expensive App Category")
plt.show()

"""### 14. What's the Name of the Most Expensive Game?

Find the most expensive app in the Game category and enter its name.
"""

# Find the most expensive game
most_expensive_game = game_apps.loc[game_apps['Price'].idxmax()]
print("Most expensive game:", most_expensive_game['App'])

# Bar chart for the most expensive game
plt.figure(figsize=(6,4))
plt.bar(most_expensive_game['App'], most_expensive_game['Price'], color='yellow')
plt.xlabel("Game Name")
plt.ylabel("Price ($)")
plt.title("Most Expensive Game")
plt.xticks(rotation=45)
plt.show()

"""### 15. Which Is the Most Popular Finance App?

What app (from the Finance category) has the most installs?
"""

# Find the finance app with the highest number of installs
most_popular_finance_app = finance_apps.loc[finance_apps['Installs'].idxmax()]
print("Most popular finance app:", most_popular_finance_app['App'])
#top 5 finance apps
top_finance_apps = finance_apps.nlargest(5, 'Installs')
plt.figure(figsize=(8,5))
plt.bar(top_finance_apps['App'], top_finance_apps['Installs'], color='blue')
plt.xlabel("Finance Apps")
plt.ylabel("Number of Installs")
plt.title("Top 5 Most Popular Finance Apps")
plt.xticks(rotation=45)
plt.show()

"""### 16. What Teen Game Has the Most Reviews?

What app from the Game category and catalogued as Teen in Content Rating has the most reviews?
"""

# Find the game with the highest number of reviews
most_reviewed_teen_game = teen_games.loc[teen_games['Reviews'].idxmax()]
print("Teen game with the most reviews:", most_reviewed_teen_game['App'])

top_teen_games = teen_games.nlargest(5, 'Reviews')
plt.figure(figsize=(8,5))
plt.bar(top_teen_games['App'], top_teen_games['Reviews'], color='orange')
plt.xlabel("Teen Games")
plt.ylabel("Number of Reviews")
plt.title("Top 5 Teen Games with Most Reviews")
plt.xticks(rotation=45)
plt.show()

"""### 17. Which Is the Free Game with the Most Reviews?

 Get the name of the free game app with the most reviews.
"""

# Find the free game with the highest number of reviews
most_reviewed_free_game = free_games.loc[free_games['Reviews'].idxmax()]
print("Free game with the most reviews:", most_reviewed_free_game['App'])
top_free_games = free_games.nlargest(5, 'Reviews')

plt.figure(figsize=(8,5))
plt.bar(top_free_games['App'], top_free_games['Reviews'], color='green')
plt.xlabel("Free Games")
plt.ylabel("Number of Reviews")
plt.title("Top 5 Free Games with Most Reviews")
plt.xticks(rotation=45)
plt.show()

"""### 18. How many Tb (tebibytes) were transferred (overall) for the most popular Lifestyle app?

This app produced the greatest amount of bytes transfer. Enter your answer in Tebibytes as a whole number (rounding down to the nearest integer). Example, if you find the total transfer to be 780.9581 Tb, just enter 780.

- Find the total size by multiplying size of the app with total installs and convert the result into TB.
"""

import numpy as np
# Find the most installed lifestyle app
most_popular_lifestyle_app = lifestyle_apps.loc[lifestyle_apps['Installs'].idxmax()]
# Convert size from MB/GB to bytes (assuming 'Size' is in MB or GB)
size_str = most_popular_lifestyle_app['Size']  # Get the size column as string
# Convert size to bytes (assuming "M" for MB and "G" for GB)
if 'M' in size_str:
    size_bytes = float(size_str.replace('M', '')) * 1e6  # Convert MB to bytes
elif 'G' in size_str:
    size_bytes = float(size_str.replace('G', '')) * 1e9  # Convert GB to bytes
else:
    size_bytes = 0  # Handle missing values
# Calculate the total bytes transferred
total_bytes = size_bytes * most_popular_lifestyle_app['Installs']

# Convert bytes to Tebibytes (1 TiB = 2^40 bytes)
total_tb = total_bytes / (2**40)

# Round down to the nearest integer
total_tb_int = int(total_tb)

# Print the final result
print("Total TB transferred:", total_tb_int)

# finally finally Show storage usage of top 5 lifestyle apps
top_lifestyle_apps = lifestyle_apps.nlargest(5, 'Installs')

# Convert sizes for visualization (use numpy for safe conversion)
sizes_in_mb = np.array([float(s.replace('M', '')) if 'M' in s else float(s.replace('G', '')) * 1024
                         if 'G' in s else 0 for s in top_lifestyle_apps['Size']])

total_sizes = sizes_in_mb * top_lifestyle_apps['Installs']

plt.figure(figsize=(8,5))
plt.bar(top_lifestyle_apps['App'], total_sizes / (2**40), color='brown')  # Convert to TB
plt.xlabel("Lifestyle Apps")
plt.ylabel("Total Storage Transferred (TB)")
plt.title("Top 5 Lifestyle Apps - Storage Transferred")
plt.xticks(rotation=45)
plt.show() # :)